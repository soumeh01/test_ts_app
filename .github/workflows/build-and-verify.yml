name: Build and Verify Workflow

on:
  workflow_call:
    secrets:
      QLTY_COVERAGE_TOKEN:
        required: false
        description: This secret is needed for Qlty coverage upload if enabled.
    inputs:
      node-version-file:
        description: 'package.json file'
        required: true
        type: string
        default: './package.json'
      package-manager:
        description: 'Package manager to use (npm or yarn)'
        required: false
        type: string
        default: 'npm'
      working-directory:
        description: 'Working directory for the build'
        required: false
        type: string
        default: '.'
      build-matrix:
        type: string
        required: false
        description: 'JSON array of objects: [{ "platform": "...", "arch": "..." }] for build combinations.'
      test-matrix:
        type: string
        required: false
        description: 'JSON array of objects: [{ "platform": "...", "arch": "..." }] for test combinations.'
      enable-qlty:
        type: boolean
        required: false
        default: false
        description: If true, coverage reports are uploaded to Qlty. Requires QLTY_COVERAGE_TOKEN secret.
      download-script-name:
        type: string
        required: false
        description: Path to an executable script. If provided, this is run once per platform before packaging. The platform is passed as an argument.
# specific command inputs
      build-command:
        description: 'Build command to run'
        required: false
        type: string
        default: 'build'
      test-command:
        description: 'Test command to run'
        required: false
        type: string
        default: 'test'
      lint-command:
        description: 'Lint command to run'
        required: false
        type: string
        default: 'lint'

        # outputs:
    #   build-success:
    #     description: 'Whether the build was successful'
    #     value: ${{ jobs.build.outputs.build-success }}
    #   build-matrix-used:
    #     description: 'The build matrix configuration used'
    #     value: ${{ jobs.matrix-config.outputs.build-matrix }}
    #   test-matrix-used:
    #     description: 'The test matrix configuration used'
    #     value: ${{ jobs.matrix-config.outputs.test-matrix }}

defaults:
  run:
    shell: bash

jobs:
  configure-ci:
    runs-on: ubuntu-latest
    outputs:
      working-dir: ${{ steps.get-working-dir.outputs.dir }}
      has-e2e-tests: ${{ steps.check-e2e-test-script.outputs.has-e2e-script }}
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Get working directory
        id: get-working-dir
        run: |
          if [ -z "${{ inputs.working-directory }}" ]; then
            echo "dir=./" >> "$GITHUB_OUTPUT"
          else
            echo "dir=${{ inputs.working-directory }}" >> "$GITHUB_OUTPUT"
          fi
      - name: Check for E2E Test Script
        id: check-e2e-test-script
        run: |
          if grep -qE '"test:e2e"\s*:' package.json; then
            echo "has-e2e-script=true" >> "$GITHUB_OUTPUT"
          fi

  build:
    needs: [ configure-ci ]
    name: 'Build (${{ matrix.platform }}, ${{ matrix.arch }})'
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(inputs.test-matrix != '' && inputs.test-matrix || '[{"platform":"windows-2022","arch":"amd64"},{"platform":"windows-2022","arch":"arm64"},{"platform":"ubuntu-24.04","arch":"amd64"},{"platform":"ubuntu-24.04","arch":"arm64"},{"platform":"macos-15-intel","arch":"amd64"},{"platform":"macos-14","arch":"arm64"}]') }}
    runs-on: ${{ matrix.platform }}
    # outputs:
    #   build-success: ${{ steps.build.outcome == 'success' }}

    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - run: git config --global core.autocrlf false

      - name: Checkout repository
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          submodules: true

      - name: Setup Node
        uses: actions/setup-node@2028fbc5c25fe9cf00d9f06a71cc4710d4507903 # v6.0.0
        with:
          node-version-file: ${{ inputs.node-version-file }}
          registry-url: https://npm.pkg.github.com
          package-manager-cache: false
          always-auth: true

      - name: Install dependencies
        working-directory: ./${{ inputs.working-directory }}
        run: |
          if [ "${{ inputs.package-manager }}" = "npm" ]; then
            npm ci
          else
            yarn --frozen-lockfile --prefer-offline --ignore-scripts
          fi

      - name: Remove badges
        # Used for release assets
        run: |
          node -e "
          const fs = require('fs');
          if (fs.existsSync('README.md')) {
            let content = fs.readFileSync('README.md', 'utf8');
            content = content.replace(/.*https:\/\/qlty\.sh\/gh.*\n?/g, '');
            content = content.replace(/.*https:\/\/securityscorecards\.dev\/viewer.*\n?/g, '');
            fs.writeFileSync('README.md', content);
            console.log('✅ Badges removed from README.md');
          } else {
            console.log('⚠️ README.md not found, skipping badge removal');
          }
          "

      - name: Lint
        working-directory: ./${{ inputs.working-directory }}
        run: |
          if [ "${{ inputs.package-manager }}" = "npm" ]; then
            npm run ${{ inputs.lint-command }}
          else
            yarn ${{ inputs.lint-command }}
          fi

      # - name: Download tool dependencies (for universal VSIX)
      #   if: ${{ inputs.download-script-name != '' }}
      #   working-directory: .github/workflows
      #   run: ./${{inputs.download-script-name}}

      - name: Run build
        id: build
        working-directory: ./${{ inputs.working-directory }}
        run: |
          if [ "${{ inputs.package-manager }}" = "npm" ]; then
            npm run ${{ inputs.build-script }}
          else
            yarn ${{ inputs.build-script }}
          fi

      - name: Upload dist
        # Used for release assets
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: dist-${{ inputs.package-manager }}
          path: |
            ./README.md
            ./package.json
            ./dist
          retention-days: 1

      - name: Create package
        working-directory: ./${{ inputs.working-directory }}
        run: |
          if [ "${{ inputs.package-manager }}" = "npm" ]; then
            npm run package
          else
            yarn package
          fi

      - name: Upload package
        if: success()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: vsix-package-${{ inputs.package-manager }}-${{ matrix.platform }}-${{ matrix.arch }}
          path: ./*.vsix
          retention-days: 1

  test:
    needs: [ configure-ci ]
    name: 'Test (${{ matrix.platform }}, ${{ matrix.arch }})'
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(inputs.test-matrix != '' && inputs.test-matrix || '[{"platform":"windows-2022","arch":"amd64"},{"platform":"windows-2022","arch":"arm64"},{"platform":"ubuntu-24.04","arch":"amd64"},{"platform":"ubuntu-24.04","arch":"arm64"},{"platform":"macos-15-intel","arch":"amd64"},{"platform":"macos-14","arch":"arm64"}]') }}
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit
      - run: git config --global core.autocrlf false
      - name: Checkout repository
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          submodules: true

      - name: Setup Node
        uses: actions/setup-node@2028fbc5c25fe9cf00d9f06a71cc4710d4507903 # v6.0.0
        with:
          node-version-file: ${{ inputs.node-version-file }}
          registry-url: https://npm.pkg.github.com
          package-manager-cache: false
          always-auth: true

      - name: Install dependencies
        working-directory: ./${{ inputs.working-directory }}
        run: |
          if [ "${{ inputs.package-manager }}" = "npm" ]; then
            npm ci
          else
            yarn --frozen-lockfile --prefer-offline --ignore-scripts
          fi

      - name: Run tests
        working-directory: ./${{ inputs.working-directory }}
        run: |
          if [ "${{ inputs.package-manager }}" = "npm" ]; then
            npm run ${{ inputs.test-script }}
          else
            yarn ${{ inputs.test-script }}
          fi

      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        # Used for release assets
        if: runner.os == 'Linux'
        with:
          name: test-coverage-${{ inputs.package-manager }}
          path: ./coverage

      # - name: End-to-end Test
      #   if: needs.configure-ci.outputs.has-e2e-tests == 'true'
      #   run: ${{ matrix.e2e-command }}

      # - name: Upload screenshots as artifacts
      #   uses: actions/upload-artifact@v4.6.0
      #   if: always()
      #   with:
      #     name: e2e-test-screenshots-${{ matrix.os }}
      #     path: ./e2e-screenshots/*.png
      #     if-no-files-found: ignore

  publish-coverage:
    name: Publish Coverage
    needs: test
    if: inputs.enable-qlty == true
    runs-on: ubuntu-24.04
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0

      - name: Download coverage reports from artifacts
        uses: actions/download-artifact@v4
        with:
          name: test-coverage-${{ inputs.package-manager }}
          path: coverage

      - name: Publish coverage report to Qlty
        uses: qltysh/qlty-action/coverage@a2277a908db90c4c868832fb9204521fb940fdb4 # v1
        with:
          token: ${{ secrets.QLTY_COVERAGE_TOKEN }}
          files: coverage/lcov.info
          skip-errors: false

  # package:
  #   name: Package
  #   runs-on: [ubuntu-latest]
  #   needs: build
  #   strategy:
  #     fail-fast: true
  #     matrix:
  #       target:
  #         - win32-x64
  #         - win32-arm64
  #         - linux-x64
  #         - linux-arm64
  #         - darwin-arm64
  #   permissions:
  #     packages: read
  #   steps:
  #     - name: Harden the runner (Audit all outbound calls)
  #       uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
  #       with:
  #         egress-policy: audit

  #     - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
  #       with:
  #         submodules: true

  #     - uses: actions/setup-node@2028fbc5c25fe9cf00d9f06a71cc4710d4507903 # v6.0.0
  #       env:
  #         NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         node-version-file: package.json
  #         registry-url: https://npm.pkg.github.com
  #         always-auth: true
  #         package-manager-cache: false

  #     - name: Download dist
  #       uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
  #       with:
  #         name: dist-${{ inputs.package-manager }}
  #         path: .

  #     # - name: Download tools
  #     #   working-directory: ./${{ inputs.working-directory }}
  #     #   run: |
  #     #     if [ "${{ inputs.package-manager }}" = "npm" ]; then
  #     #       npm ci
  #     #       npm run download-tools -- --target ${{ matrix.target }} --no-cache
  #     #     else
  #     #       yarn --frozen-lockfile --ignore-scripts --prefer-offline
  #     #       yarn download-tools --target ${{ matrix.target }} --no-cache
  #     #     fi

  #     - name: Create package
  #       working-directory: ./${{ inputs.working-directory }}
  #       run: |
  #         if [ "${{ inputs.package-manager }}" = "npm" ]; then
  #           npm run package
  #         else
  #           yarn package
  #         fi

  #     - name: Upload package
  #       if: success()
  #       uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
  #       with:
  #         name: vsix-package-${{ inputs.package-manager }}-${{ matrix.target }}
  #         path: ./*.vsix
  #         retention-days: 1

  # publish:
  #   name: Publish release
  #   runs-on: [ubuntu-latest]
  #   if: github.event_name == 'release'
  #   needs: package
  #   permissions:
  #     contents: write  # for softprops/action-gh-release to create a GitHub release
  #   steps:
  #     - name: Harden the runner (Audit all outbound calls)
  #       uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
  #       with:
  #         egress-policy: audit

  #     - name: Download packages
  #       uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
  #       with:
  #         pattern: vsix-package-*

  #     - name: Download coverage report
  #       uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
  #       with:
  #         pattern: test-coverage

  #     - name: Download test report
  #       uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
  #       with:
  #         pattern: test-report-linux

  #     - name: Zip test report
  #       run: zip -r test-report.zip *
  #       working-directory: test-report-linux

  #     - name: Zip test coverage
  #       run: zip -r test-coverage.zip *
  #       working-directory: test-coverage

  #     - name: Attach packages
  #       uses: softprops/action-gh-release@6cbd405e2c4e67a21c47fa9e383d020e4e28b836 # v2.3.3
  #       with:
  #         files: |
  #           **/*.vsix
  #           test-coverage/test-coverage.zip
  #           test-report-linux/test-report.zip
