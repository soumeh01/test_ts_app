name: Reusable Build Workflow

on:
  workflow_call:
    inputs:
      node-version:
        description: 'Node.js version to use'
        required: false
        type: string
        default: '20'
      package-manager:
        description: 'Package manager to use (npm or yarn)'
        required: false
        type: string
        default: 'npm'
      working-directory:
        description: 'Working directory for the build'
        required: false
        type: string
        default: '.'
      build-script:
        description: 'Build script to run'
        required: false
        type: string
        default: 'build'
      artifact-name:
        description: 'Name for the build artifact'
        required: false
        type: string
        default: 'build-output'
      artifact-path:
        description: 'Path to upload as artifact'
        required: false
        type: string
        default: 'dist'
    outputs:
      build-success:
        description: 'Whether the build was successful'
        value: ${{ jobs.build.outputs.build-success }}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      build-success: ${{ steps.build.outcome == 'success' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Determine cache strategy
        id: cache-strategy
        working-directory: ${{ inputs.working-directory }}
        run: |
          if [ "${{ inputs.package-manager }}" = "npm" ] && [ -f "package-lock.json" ]; then
            echo "cache-type=npm" >> $GITHUB_OUTPUT
          elif [ "${{ inputs.package-manager }}" = "yarn" ] && [ -f "yarn.lock" ]; then
            echo "cache-type=yarn" >> $GITHUB_OUTPUT
          else
            echo "cache-type=" >> $GITHUB_OUTPUT
            echo "⚠️ No lockfile found for ${{ inputs.package-manager }}, caching disabled"
          fi

      - name: Setup Node.js (with cache)
        if: steps.cache-strategy.outputs.cache-type != ''
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: ${{ steps.cache-strategy.outputs.cache-type }}

      - name: Setup Node.js (without cache)
        if: steps.cache-strategy.outputs.cache-type == ''
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}

      - name: Install dependencies (npm)
        if: inputs.package-manager == 'npm'
        working-directory: ${{ inputs.working-directory }}
        run: npm ci

      - name: Check for yarn.lock
        if: inputs.package-manager == 'yarn'
        id: yarn-lock-check
        working-directory: ${{ inputs.working-directory }}
        run: |
          if [ -f "yarn.lock" ]; then
            echo "yarn-lock-exists=true" >> $GITHUB_OUTPUT
          else
            echo "yarn-lock-exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Install dependencies (yarn with lockfile)
        if: inputs.package-manager == 'yarn' && steps.yarn-lock-check.outputs.yarn-lock-exists == 'true'
        working-directory: ${{ inputs.working-directory }}
        run: yarn install --frozen-lockfile

      - name: Install dependencies (yarn without lockfile)
        if: inputs.package-manager == 'yarn' && steps.yarn-lock-check.outputs.yarn-lock-exists == 'false'
        working-directory: ${{ inputs.working-directory }}
        run: |
          echo "⚠️ No yarn.lock found. Installing dependencies and creating lockfile..."
          yarn install

      - name: Clean previous build
        working-directory: ${{ inputs.working-directory }}
        run: |
          if [ "${{ inputs.package-manager }}" = "npm" ]; then
            npm run clean || echo "Clean script not found, skipping..."
          else
            yarn clean || echo "Clean script not found, skipping..."
          fi

      - name: Run build
        id: build
        working-directory: ${{ inputs.working-directory }}
        run: |
          if [ "${{ inputs.package-manager }}" = "npm" ]; then
            npm run ${{ inputs.build-script }}
          else
            yarn ${{ inputs.build-script }}
          fi

      - name: Upload build artifacts
        if: steps.build.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.artifact-name }}
          path: ${{ inputs.working-directory }}/${{ inputs.artifact-path }}
          retention-days: 7

      - name: Build summary
        run: |
          echo "## Build Results 🏗️" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ steps.build.outcome == 'success' && '✅ Success' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Node Version**: ${{ inputs.node-version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Package Manager**: ${{ inputs.package-manager }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Working Directory**: ${{ inputs.working-directory }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.build.outcome }}" = "success" ]; then
            echo "- **Artifact**: ${{ inputs.artifact-name }} uploaded" >> $GITHUB_STEP_SUMMARY
          fi